openapi: 3.0.2
info:
  title: "Magpie Analytics API"
  version: "0.1.0"
paths:
  /api/v1/user/:
    get:
      operationId: retrieveUser
      description: "Reads UserModel fields.
      Accepts GET method.
      
      
      Default accepted fields: None. Authentication details are sent via cookies.
      
      
      Default display fields: name,  email
      
      
      Read-only fields: name, email
      
      
      Returns UserModel fields."
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
      tags:
        - api
  /api/v1/user/profile/:
    get:
      operationId: retrieveProfile
      description: Read/Update User Profile.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: ""
      tags:
        - api
    put:
      operationId: updateProfile
      description: Read/Update User Profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Profile"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: ""
      tags:
        - api
    patch:
      operationId: partialUpdateProfile
      description: Read/Update User Profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Profile"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: ""
      tags:
        - api
  /api/v1/user/dashboard/:
    get:
      operationId: listDashboards
      description: Read a list of Dashboard.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dashboard"
          description: ""
      tags:
        - api
  /api/v1/user/dashboard/{id}:
    get:
      operationId: retrieveDashboard
      description: Read a single Dashboard.
      parameters:
        - name: id
          in: path
          required: true
          description: A UUID string identifying this dashboard.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
          description: ""
      tags:
        - api
  /api/v1/registration/:
    post:
      operationId: createRegistration
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Registration"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Registration"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Registration"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationResponse"
          description: ""
      tags:
        - api
  /api/v1/login/:
    post:
      operationId: createLogin
      description: "Check the credentials and return Tokens

        if the credentials are valid and authenticated.

        Calls dj-rest-auth LoginView view to set access token,

        sessionid, csrftoken in http-only cookie. This cookie is
        
        sent in consecutive requests.


        Accept the following POST parameters:  email, password

        Return refresh token, access token and nested user object."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Login"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
          description: ""
      tags:
        - api
  /api/v1/password/reset/:
    post:
      operationId: createPasswordReset
      description: "Calls Django Auth PasswordResetForm save method.


        Accepts the following POST parameters: email

        Returns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordReset"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetResponse"
          description: ""
      tags:
        - api
  /api/v1/password/change/:
    post:
      operationId: createPasswordChange
      description: "Calls Django Auth SetPasswordForm save method.


        Accepts the following POST parameters: new_password1, new_password2, old_password

        Returns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordChange"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordChange"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordChangeResponse"
          description: ""
      tags:
        - api
  /api/v1/token/verify/:
    post:
      operationId: createTokenVerify
      description:
        "Takes a token and indicates if it is valid.  This view provides
        no

        information about a token's fitness for a particular use."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenVerify"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenVerify"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenVerify"
          description: ""
      tags:
        - api
  /api/v1/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: Send access token as http-only cookie when refreshing token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefreshResponse"
          description: ""
      tags:
        - api
  /api/v1/account-confirm-email/:
    post:
      operationId: createVerifyEmail
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/VerifyEmail"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyEmail"
          description: ""
      tags:
        - api
  /api/v1/user/apply-for-license/:
    put:
      operationId: updateUserLicense
      description: Apply for Pro/Enterprise.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LicenseUpdate"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LicenseUpdate"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/LicenseUpdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseUpdate"
          description: ""
      tags:
        - api
    patch:
      operationId: partialUpdateUserLicense
      description: Apply for Pro/Enterprise.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LicenseUpdate"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LicenseUpdate"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/LicenseUpdate"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseUpdate"
          description: ""
      tags:
        - api
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
    Profile:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
              readOnly: true
            email:
              type: string
              format: email
              readOnly: true
          readOnly: true
        phone_no:
          type: string
          readOnly: true
        org_name:
          type: string
          maxLength: 255
        address:
          type: string
        bank_name:
          type: string
          readOnly: true
        bank_acc:
          type: string
          readOnly: true
    Dashboard:
      type: object
      properties:
        title:
          type: string
          maxLength: 250
        dashboard_id:
          type: string
          maxLength: 250
        thumbnail_url:
          type: string
          maxLength: 250
        license_type:
          type: string
      required:
        - dashboard_id
        - thumbnail_url
        - license_type
    Registration:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        phone_no:
          type: string
    RegistrationResponse:
      type: object
      properties:
        detail:
          type: string
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        refresh_token:
          type: string
        access_token:
          type: string
        user:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
              format: email
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    PasswordResetResponse:
      type: object
      properties:
        detail:
          type: string
    PasswordChange:
      type: object
      properties:
        old_password:
          type: string
          maxLength: 128
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
        - old_password
        - new_password1
        - new_password2
    PasswordChangeResponse:
      type: object
      properties:
        detail:
          type: string
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
      required:
        - refresh
    TokenRefreshResponse:
      type: object
      properties:
        access:
          type: string
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
        - key
    LicenseUpdate:
      type: object
      properties:
        applied_license:
          enum:
            - free
            - trial
            - pro
            - enterprise
          type: string
        applied_license_qt:
          type: integer
